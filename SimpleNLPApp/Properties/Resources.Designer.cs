//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimpleNLPApp.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SimpleNLPApp.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на КЛАССИФИКАЦИЯ
        ///
        ///Классификация — это процесс автоматического определения класса (категории) для новых текстов на основе ранее обученной модели.
        ///
        ///Вы можете выбрать один или несколько файлов, провести их анализ и получить вероятности для каждого класса, а также финальный результат предсказания.
        ///
        ///Система поддерживает:
        ///- пакетную классификацию нескольких текстов;
        ///- сравнение реальных и предсказанных классов;
        ///- расчёт метрик качества (accuracy, precision, recall, F1);
        ///- экспорт результатов классификации  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HelpClassification {
            get {
                return ResourceManager.GetString("HelpClassification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ЭКСПОРТ МЕТРИК
        ///
        ///Если вы хотите сохранить текущие результаты классификации, нажмите «Экспорт метрик» в верхнем меню.
        ///
        ///Будет создан файл с расширением .snlpmetrics. В нём содержатся значения Accuracy, Precision, Recall и F1-score.
        ///
        ///Этот файл можно использовать для отчётов, анализа качества модели или ведения истории экспериментов.
        ///.
        /// </summary>
        internal static string HelpClassifyExport {
            get {
                return ResourceManager.GetString("HelpClassifyExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на РЕАЛЬНЫЕ И ПРЕДСКАЗАННЫЕ КЛАССЫ
        ///
        ///У каждого текста можно задать реальный класс вручную через выпадающий список «Реальный класс».
        ///
        ///Если вы хотите задать один и тот же класс сразу нескольким текстам:
        ///- выделите их с помощью клавиш Ctrl или Shift;
        ///- воспользуйтесь пунктом меню «Назначить класс выбранным» и выберите нужный класс.
        ///
        ///После запуска классификации в каждой карточке отобразится предсказанный класс. Под ним отображаются вероятности принадлежности текста ко всем доступным классам.
        ///.
        /// </summary>
        internal static string HelpClassifyLabels {
            get {
                return ResourceManager.GetString("HelpClassifyLabels", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ОЦЕНКА КАЧЕСТВА (МЕТРИКИ)
        ///
        ///После запуска классификации, если у всех текстов указаны реальные классы, программа автоматически рассчитает метрики оценки качества модели:
        ///
        ///• Accuracy — точность (доля правильных предсказаний).
        ///• Precision — насколько предсказания модели надёжны по одному классу.
        ///• Recall — насколько полно модель охватывает нужный класс.
        ///• F1-score — среднее значение между Precision и Recall.
        ///
        ///Метрики отображаются в правой части окна, в специальной панели.
        ///.
        /// </summary>
        internal static string HelpClassifyMetrics {
            get {
                return ResourceManager.GetString("HelpClassifyMetrics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ЗАПУСК КЛАССИФИКАЦИИ
        ///
        ///Для запуска классификации сначала необходимо загрузить тексты, которые вы хотите классифицировать.
        ///
        ///1. Нажмите пункт меню «Добавить тексты».
        ///2. Выберите один или несколько .txt файлов.
        ///3. Загруженные тексты появятся на экране в виде карточек.
        ///
        ///После этого нажмите «Классифицировать». Модель предскажет класс для каждого текста, а также рассчитает вероятности принадлежности к другим возможным классам.
        ///.
        /// </summary>
        internal static string HelpClassifyStart {
            get {
                return ResourceManager.GetString("HelpClassifyStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Справка: Decision Tree (Дерево решений)
        ///
        ///Дерево решений — это понятный и логичный алгоритм классификации, который принимает решения путём последовательных разбиений данных на основе признаков.
        ///
        ///В каждом узле дерева происходит проверка условия вида:
        ///Признак[i] ≤ Порог
        ///
        ///Если условие выполняется — переходим в левое поддерево, иначе — в правое. Это продолжается до тех пор, пока не достигнут лист, в котором уже задан предсказанный класс.
        ///
        ///Параметры модели:
        ///• MaxDepth — максимальная глубина дерева. Чем  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HelpDecisionTree {
            get {
                return ResourceManager.GetString("HelpDecisionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ОБЩИЕ СВЕДЕНИЯ
        ///
        ///Это приложение предназначено для классификации текстов с помощью моделей машинного обучения.
        ///
        ///Оно позволяет:
        ///- добавлять тексты и размечать их по классам;
        ///- обучать модель на этих данных;
        ///- выполнять автоматическую классификацию новых текстов;
        ///- оценивать точность предсказаний по стандартным метрикам.
        ///
        ///Интерфейс адаптирован для пользователей без глубоких знаний в ML.
        ///.
        /// </summary>
        internal static string HelpGeneral {
            get {
                return ResourceManager.GetString("HelpGeneral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ИНТЕРФЕЙС И УПРАВЛЕНИЕ
        ///
        ///В этом разделе описан пользовательский интерфейс приложения. Вы узнаете:
        ///
        ///- как устроено главное окно и где начать работу;
        ///- как создавать, загружать и управлять моделью;
        ///- как осуществляется предобработка текстов;
        ///- как работает окно модели и список текстов;
        ///- как использовать верхнее меню и контекстные действия.
        ///
        ///Раздел подскажет, где искать нужные функции, как ориентироваться в интерфейсе и что делать на каждом этапе работы..
        /// </summary>
        internal static string HelpInterface {
            get {
                return ResourceManager.GetString("HelpInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на РАБОТА С МОДЕЛЯМИ
        ///
        ///В приложении поддерживаются несколько моделей машинного обучения для классификации текстов:
        ///
        ///1. **Наивный байесовский классификатор**
        ///2. **Логистическая регрессия**
        ///3. **Метод опорных векторов (SVM)**
        ///
        ///Каждая модель имеет свои особенности, преимущества и ограничения. Выбор подходящей модели зависит от объёма данных, структуры текста и требуемой точности.
        ///
        ///При создании новой модели вы можете выбрать желаемый алгоритм. После загрузки текстов и назначения классов вы можете запустит [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HelpModel {
            get {
                return ResourceManager.GetString("HelpModel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Выгрузка модели
        ///
        ///После того как модель была обучена, её можно сохранить для дальнейшего использования. Для этого в верхнем меню выберите пункт «Файл» → «Выгрузить модель».
        ///
        ///Модель будет сохранена в файл с расширением .snlp. Этот файл содержит:
        ///• Тип модели (например, NaiveBayes, LogisticRegression и т.д.);
        ///• Все параметры модели (например, альфа, скорость обучения, глубина дерева и т.д.);
        ///• Список классов;
        ///• Обученные данные (веса, вероятности, дерево, и т.д.);
        ///• Информацию о том, была ли модель об [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HelpModelExport {
            get {
                return ResourceManager.GetString("HelpModelExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на KNN (k-ближайших соседей)
        ///
        ///Алгоритм KNN (k-nearest neighbors) классифицирует текст, опираясь на ближайшие тексты в обучающей выборке. Он не обучается напрямую, а просто запоминает вектора всех тренировочных текстов и их классы. При классификации нового текста он ищет k ближайших соседей и определяет итоговый класс голосованием.
        ///
        ///Как работает:
        ///- вычисляется расстояние между входным текстом и каждым обучающим текстом (используется косинусное расстояние);
        ///- выбираются `k` ближайших по расстоянию текстов; [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HelpModelKNN {
            get {
                return ResourceManager.GetString("HelpModelKNN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ЛОГИСТИЧЕСКАЯ РЕГРЕССИЯ
        ///
        ///Логистическая регрессия — это линейный классификатор, который оценивает вероятность принадлежности текста к одному из классов. Она широко применяется в задачах бинарной и многоклассовой классификации.
        ///
        ///**Как работает**:
        ///- Использует взвешенную сумму признаков (слов) и применяет логистическую функцию (сигмоиду), чтобы получить вероятность.
        ///- На выходе — вероятность принадлежности к каждому классу.
        ///
        ///**Преимущества**:
        ///- Быстрая, надёжная и интерпретируемая.
        ///- Позволяет понять [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HelpModelLogistic {
            get {
                return ResourceManager.GetString("HelpModelLogistic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на НАИВНЫЙ БАЙЕСОВСКИЙ КЛАССИФИКАТОР
        ///
        ///Наивный байесовский классификатор — это вероятностная модель, которая делает предсказания на основе формулы Байеса. &quot;Наивный&quot; он потому, что предполагает независимость всех признаков (слов) между собой, что в реальности не всегда так, но работает достаточно хорошо.
        ///
        /// **Как работает**:
        ///- Рассчитывает вероятность принадлежности текста к каждому классу на основе частоты слов в обучающей выборке.
        ///- Выбирает класс с наибольшей вероятностью.
        ///
        /// **Преимущества**:
        ///- Очень  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HelpModelNaiveBayes {
            get {
                return ResourceManager.GetString("HelpModelNaiveBayes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на МЕТОД ОПОРНЫХ ВЕКТОРОВ (SVM)
        ///
        ///SVM — это мощный алгоритм, который ищет гиперплоскость, максимально разделяющую классы в пространстве признаков. Он особенно эффективен при работе с текстами, где число признаков (слов) может быть очень большим.
        ///
        ///**Как работает**:
        ///- Строит границу между классами с максимальным &quot;отступом&quot;.
        ///- При необходимости использует ядровые функции (в данной реализации используется линейная версия).
        ///
        ///**Преимущества**:
        ///- Высокая точность на сложных задачах.
        ///- Хорошо работает при бол [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HelpModelSVM {
            get {
                return ResourceManager.GetString("HelpModelSVM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ОБУЧЕНИЕ МОДЕЛИ
        ///
        ///После загрузки текстов и назначения им классов вы можете запустить процесс обучения модели — это ключевой шаг, на основе которого будет происходить вся дальнейшая классификация.
        ///
        ///Шаги:
        ///
        ///1. Убедитесь, что все тексты размечены (присвоены классы).
        ///2. Убедитесь, что выбран метод предобработки (лемматизация или стемминг).
        ///3. Перейдите в меню:
        ///   **Тренировать модель**
        ///
        ///Процесс обучения отображается через прогресс-бар, включающий:
        ///- предобработку текстов (если включена);
        ///- векторизац [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HelpModelTraining {
            get {
                return ResourceManager.GetString("HelpModelTraining", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на РАБОТА С ТЕКСТАМИ
        ///
        ///Этот раздел посвящён загрузке, разметке и обработке текстов перед обучением модели. Вы узнаете, как добавлять текстовые файлы, присваивать им классы, применять предобработку и использовать контекстное меню для удобной работы.
        ///
        ///Также вы научитесь работать с множественным выбором текстов, чтобы ускорить массовые действия.
        ///.
        /// </summary>
        internal static string HelpText {
            get {
                return ResourceManager.GetString("HelpText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ДОБАВЛЕНИЕ ТЕКСТОВ
        ///
        ///Вы можете добавить текстовые файлы через меню:
        ///**Текст → Добавить текстовый файл**
        ///
        ///Формат файлов — `.txt`. Один файл = один текст. Название файла будет использоваться как заголовок текста.
        ///
        ///Если вы добавляете файл, который уже есть в системе, он будет загружен заново, но может перезаписать старый.
        ///
        ///Также можно использовать пункт:
        ///**Добавить текст без обработки**, если вы не хотите применять лемматизацию или стемминг к этому тексту.
        ///.
        /// </summary>
        internal static string HelpTextAdd {
            get {
                return ResourceManager.GetString("HelpTextAdd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на НАЗНАЧЕНИЕ КЛАССОВ
        ///
        ///Каждому тексту необходимо присвоить класс (категорию), чтобы использовать его для обучения модели.
        ///
        ///Класс указывается:
        ///- при загрузке текста;
        ///- вручную через контекстное меню;
        ///- или через выпадающий список в нижней части интерфейса.
        ///
        ///Если текст не размечен — он не будет использован в обучении.
        ///
        ///Вы можете создавать и удалять классы в меню **Класс → Добавить / Удалить**..
        /// </summary>
        internal static string HelpTextClass {
            get {
                return ResourceManager.GetString("HelpTextClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на КОНТЕКСТНОЕ МЕНЮ
        ///
        ///При нажатии правой кнопкой мыши на текст в списке откроется контекстное меню с возможностями:
        ///
        ///- **Изменить класс** — выбрать другой класс.
        ///- **Удалить текст** — удалить текст из проекта.
        ///- **Добавить/удалить предобработку** — изменить состояние обработки для этого текста.
        ///
        ///Контекстное меню упрощает управление текстами и ускоряет работу с разметкой.
        ///.
        /// </summary>
        internal static string HelpTextContext {
            get {
                return ResourceManager.GetString("HelpTextContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на МНОЖЕСТВЕННЫЙ ВЫБОР
        ///
        ///Вы можете выделить сразу несколько текстов.
        ///
        ///Это полезно, если вы хотите:
        ///- массово удалить тексты,
        ///- изменить их класс,
        ///- включить или выключить предобработку сразу для группы.
        ///
        ///Команды применяются ко всем выбранным строкам.
        ///.
        /// </summary>
        internal static string HelpTextMultiSelect {
            get {
                return ResourceManager.GetString("HelpTextMultiSelect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ПРЕДОБРАБОТКА ТЕКСТОВ
        ///
        ///Предобработка — это автоматическая очистка текста перед обучением:
        ///
        ///- удаление пунктуации;
        ///- перевод в нижний регистр;
        ///- лемматизация (или стемминг) — приведение слов к начальной форме;
        ///- фильтрация лишних символов.
        ///
        ///Вы можете:
        ///- применить предобработку ко всем текстам (через меню),
        ///- отключить её для отдельного текста через контекстное меню.
        ///
        ///Тексты, уже предобработанные, помечаются флажком внутри системы и не будут обработаны повторно..
        /// </summary>
        internal static string HelpTextPreprocess {
            get {
                return ResourceManager.GetString("HelpTextPreprocess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на КОНТЕКСТНОЕ МЕНЮ ТЕКСТОВ
        ///
        ///По правому клику на тексте в списке открывается контекстное меню с функциями:
        ///
        ///- **Изменить класс** — присвоить тексту нужную категорию.
        ///- **Удалить текст** — удалить выбранные элементы.
        ///- **Добавить/удалить предобработку** — включить или отключить повторную обработку текста.
        ///
        ///Это удобно при работе с множеством файлов, особенно при ручной разметке..
        /// </summary>
        internal static string HelpUIContext {
            get {
                return ResourceManager.GetString("HelpUIContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на СОЗДАНИЕ МОДЕЛИ
        ///
        ///Окно создания модели содержит:
        ///
        ///- поле для ввода имени модели;
        ///- выпадающий список для выбора типа модели (например, логистическая регрессия, наивный байес и др.);
        ///- параметры, специфичные для выбранного типа модели (например, learning rate, epochs и др.);
        ///- кнопки **Назад** (возврат в главное меню) и **Создать** (открывает окно модели).
        ///
        ///Обратите внимание: параметры, заданные на этом этапе, **нельзя изменить после создания**.
        ///.
        /// </summary>
        internal static string HelpUICreate {
            get {
                return ResourceManager.GetString("HelpUICreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ЗАГРУЗКА МОДЕЛИ
        ///
        ///Кнопка **Загрузить модель** в главном меню открывает диалог выбора файла `.snlp` — это формат сохранённой модели, включая обученные параметры и векторизатор.
        ///
        ///После выбора файла:
        ///- открывается окно модели;
        ///- отображаются все тексты, классы и параметры;
        ///- вы можете приступить к классификации или дообучению.
        ///
        ///Если файл повреждён или несовместим, приложение выдаст соответствующее сообщение об ошибке..
        /// </summary>
        internal static string HelpUILoad {
            get {
                return ResourceManager.GetString("HelpUILoad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ОКНО МОДЕЛИ
        ///
        ///Это основное рабочее окно приложения после создания или загрузки модели.
        ///
        ///### В нижней части:
        ///- список загруженных текстов (`ListBox`);
        ///- чекбокс **«Выбрать все»** — выделяет/снимает все тексты.
        ///
        ///### В верхней части:
        ///- текущая модель: тип и параметры;
        ///- метод приведения к одной форме;
        ///- фильтрация текстов по классам (выпадающий список).
        ///
        ///Тексты можно добавлять через верхнее меню. Контекстное меню доступно по правому клику на тексте.
        ///
        ///Параметры модели отображаются справа (например [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HelpUIMain {
            get {
                return ResourceManager.GetString("HelpUIMain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ВЕРХНЕЕ МЕНЮ
        ///
        ///Главное окно содержит меню с вкладками:
        ///
        ///**Файл**
        ///- Новая модель
        ///- Открыть модель
        ///- Закрыть модель
        ///- Выгрузить модель
        ///
        ///**Класс**
        ///- Добавить класс
        ///- Удалить класс
        ///
        ///**Текст**
        ///- Добавить текст
        ///- Добавить без обработки
        ///- Подготовить тексты
        ///
        ///**Тренировать модель**
        ///- Запускает процесс обучения (если все условия соблюдены)
        ///
        ///**Тест**
        ///- Классификация текста (открывает окно классификации)
        ///
        ///**Сеть**
        ///- Загрузить новости с сайта interfax.ru
        ///
        ///**Справка**
        ///- Открывает окно справоч [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HelpUIMenu {
            get {
                return ResourceManager.GetString("HelpUIMenu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ПРЕДОБРАБОТКА ТЕКСТОВ
        ///
        ///Окно предобработки открывается из главного меню по кнопке **«Подготовить тексты»**.
        ///
        ///Возможности:
        ///- выбрать путь, куда сохранить обработанные тексты;
        ///- выбрать метод приведения к одной форме (лемматизация или стемминг);
        ///- добавить `.txt` файлы для обработки;
        ///- просмотреть список выбранных файлов;
        ///- удалить выделенные тексты через контекстное меню;
        ///- нажать **Подготовить тексты** для запуска обработки.
        ///
        ///После завершения предобработки окно автоматически закроется..
        /// </summary>
        internal static string HelpUIPrepare {
            get {
                return ResourceManager.GetString("HelpUIPrepare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ГЛАВНОЕ МЕНЮ
        ///
        ///После запуска приложения вы видите стартовое окно с тремя кнопками:
        ///
        ///1. **Новая модель** — открывает окно создания модели.
        ///2. **Загрузить модель** — позволяет выбрать ранее сохранённую модель из файла `.snlp`.
        ///3. **Подготовить тексты** — запускает процесс предобработки текстовых файлов.
        ///
        ///В правом нижнем углу находится кнопка **«?»**, открывающая справку.
        ///
        ///Выбор одного из пунктов переводит вас в соответствующее рабочее окно..
        /// </summary>
        internal static string HelpUIStart {
            get {
                return ResourceManager.GetString("HelpUIStart", resourceCulture);
            }
        }
    }
}
